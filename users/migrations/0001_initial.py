# Generated by Django 3.2.18 on 2023-09-08 09:41

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(11)], verbose_name='Цифра')),
                ('litera', models.CharField(max_length=2, verbose_name='Литера')),
                ('faculty', models.CharField(max_length=256, verbose_name='Направление')),
            ],
            options={
                'verbose_name': 'Класс',
                'verbose_name_plural': 'Классы',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Роль')),
                ('role_type', models.CharField(max_length=100, verbose_name='Тип роли')),
            ],
            options={
                'verbose_name': 'Роль',
                'verbose_name_plural': 'Роли',
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Навык',
                'verbose_name_plural': 'Навыки',
            },
        ),
        migrations.CreateModel(
            name='Speciality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Специальность',
                'verbose_name_plural': 'Специальности',
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Название')),
                ('description', models.TextField(verbose_name='Описание')),
                ('address', models.TextField(verbose_name='Адрес')),
                ('classes', models.ManyToManyField(blank=True, related_name='organizations_class', to='users.Class', verbose_name='Классы')),
            ],
            options={
                'verbose_name': 'Организация',
                'verbose_name_plural': 'Организации',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=256, unique=True, verbose_name='Логин')),
                ('cover', models.ImageField(blank=True, null=True, upload_to=users.models.CustomUser.get_path, verbose_name='Аватарка')),
                ('firstname', models.CharField(blank=True, max_length=256, verbose_name='Имя')),
                ('lastname', models.CharField(blank=True, max_length=256, verbose_name='Фамилия')),
                ('bio', models.TextField(blank=True, null=True, verbose_name='Био')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Почта')),
                ('telegram', models.CharField(blank=True, max_length=256, null=True, verbose_name='Telegram')),
                ('phone_number', models.CharField(max_length=64, verbose_name='Номер телефона')),
                ('public', models.BooleanField(blank=True, default=False, verbose_name='Открытый аккаунт')),
                ('password', models.CharField(max_length=256, verbose_name='Пароль')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users_organization', to='users.organization', verbose_name='Организация')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users_role', to='users.role', verbose_name='Роль')),
                ('school_class', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='users_class', to='users.class', verbose_name='Класс')),
                ('skills', models.ManyToManyField(blank=True, related_name='users_skill', to='users.Skill', verbose_name='Навык')),
                ('speciality', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='users_speciality', to='users.speciality', verbose_name='Специальность')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
        ),
    ]
